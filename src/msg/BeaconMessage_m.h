//
// Generated file, do not edit! Created by nedtool 5.3 from src/msg/BeaconMessage.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __VEINS_MANHATTAN_BEACONMESSAGE_M_H
#define __VEINS_MANHATTAN_BEACONMESSAGE_M_H


#include <omnetpp.h>
#include "../dbscan.h"
#include "veins/modules/mobility/traci/TraCICommandInterface.h"


// nedtool version check
#define MSGC_VERSION 0x0503
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

namespace veins_manhattan {


/**
 * Class generated from <tt>src/msg/BeaconMessage.msg:21</tt> by nedtool.
 * <pre>
 * //
 * // TODO generated message class
 * //
 * packet BeaconMessage
 * {
 *     int idSender;
 *     string roadSender;
 *     string TypeDevice;
 *     string CarSpeed;
 *     string RoadSpeed;
 *     string LimitCarsOnRoad;
 * 
 * }
 * </pre>
 */

class BeaconMessage : public ::omnetpp::cPacket
{
  protected:
    int idSender;
    ::omnetpp::opp_string roadSender;
    ::omnetpp::opp_string TypeDevice;
    ::omnetpp::opp_string CarSpeed;
    ::omnetpp::opp_string RoadSpeed;
    ::omnetpp::opp_string LimitCarsOnRoad;
    std::map<int,std::string> vizinhos;
    std::pair<int, int**> matrixAdj;
    bool dbscanExecutado;

  private:
    void copy(const BeaconMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const BeaconMessage&);

  public:
    BeaconMessage(const char *name=nullptr, short kind=0);
    BeaconMessage(const BeaconMessage& other);
    virtual ~BeaconMessage();
    BeaconMessage& operator=(const BeaconMessage& other);
    virtual BeaconMessage *dup() const override {return new BeaconMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getIdSender() const;
    virtual void setIdSender(int idSender);
    virtual const char * getRoadSender() const;
    virtual void setRoadSender(const char * roadSender);
    virtual const char * getTypeDevice() const;
    virtual void setTypeDevice(const char * TypeDevice);
    virtual const char * getCarSpeed() const;
    virtual void setCarSpeed(const char * CarSpeed);
    virtual const char * getRoadSpeed() const;
    virtual void setRoadSpeed(const char * RoadSpeed);
    virtual const char * getLimitCarsOnRoad() const;
    virtual void setLimitCarsOnRoad(const char * LimitCarsOnRoad);
    virtual void setVizinhos(std::map<int,std::string> vizinhos);
    virtual std::map<int,std::string> getVizinhos() const;
    virtual void setMatrixAdj(std::pair<int, int**> matrixAdj);
    virtual std::pair<int, int**> getMatrixAdj() const;
    virtual void setDbscanExecutado(bool dbscanExecutado);
    virtual bool getDbscanExecutado() const;
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const BeaconMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, BeaconMessage& obj) {obj.parsimUnpack(b);}

} // namespace veins_manhattan

#endif // ifndef __VEINS_MANHATTAN_BEACONMESSAGE_M_H

